type Query {
  jira: JiraQuery
}

type PageInfo {
  hasNextPage: Boolean
  hasPreviousPage: Boolean
  startCursor: String
  endCursor: String
}

scalar JSDependency

enum SortDirection {
  ASC
  DESC
}

enum JiraDirectoryFilterCriteriaType {
  KEYWORD
  MULTISELECT
  SELECT
}

input JiraDirectoryFilterCriteriaInput {
  type: JiraDirectoryFilterCriteriaType!
  id: String!
  value: String
  values: [String!]
}

input JiraDirectoryFilterInput {
  criteria: [JiraDirectoryFilterCriteriaInput!]
  page: Int
  sortField: String
  sortDirection: SortDirection
}

type JiraQuery {
  directory(
    cloudId: ID!
    id: ID!
    supported: [String]
    filter: JiraDirectoryFilterInput
  ): JiraDirectory!
  projectCategories(
    cloudId: ID!
    searchText: String
    first: Int
    last: Int
    before: String
    after: String
  ): JiraProjectCategoryConnection
  projectTypes(
    cloudId: ID!
    searchText: String
    first: Int
    last: Int
    before: String
    after: String
  ): JiraProjectTypeDetailsConnection
}

interface JiraDirectory {
  title: String!
  description: String
  createDirectoryItem(supported: [String]): JiraDirectoryCreateItem
  filterCriteria(supported: [String]): [JiraDirectoryFilterCriteria!]!
  result: JiraDirectoryResult
  js(module: String!, id: String): JSDependency!
}

interface JiraDirectoryCreateItem {
  canCreate: Boolean!
  js(module: String!, id: String): JSDependency!
}

type JiraProjectDirectory implements JiraDirectory {
  title: String!
  description: String
  createDirectoryItem(supported: [String]): JiraDirectoryCreateItem
  filterCriteria(supported: [String]): [JiraDirectoryFilterCriteria!]!
  result: JiraDirectoryResult
  js(module: String!, id: String): JSDependency!
}

type JiraProjectDirectoryCreateItem implements JiraDirectoryCreateItem {
  canCreate: Boolean!
  js(module: String!, id: String): JSDependency!
}

type JiraProjectCategory {
  id: ID!
  categoryId: String!
  name: String!
  description: String
}

type JiraProjectCategoryConnection {
  totalCount: Int
  pageInfo: PageInfo!
  edges: [JiraProjectCategoryEdge]
}

type JiraProjectCategoryEdge {
  node: JiraProjectCategory
  cursor: String!
}

interface JiraDirectoryFilterCriteria {
  type: String
}

type JiraDirectorySearchTextFilterCriteria implements JiraDirectoryFilterCriteria {
  type: String
  # return the searchText specified by the user
  searchText: String
  js(module: String!, id: String): JSDependency!
}

type JiraProjectDirectoryProjectTypesFilterCriteria implements JiraDirectoryFilterCriteria {
  type: String
  selectedItems: [JiraProjectTypeDetails]
  js(module: String!, id: String): JSDependency!
}

type JiraProjectDirectoryProjectCategoriesFilterCriteria implements JiraDirectoryFilterCriteria {
  type: String
  selectedItems: [JiraProjectCategory]
  js(module: String!, id: String): JSDependency!
}

interface JiraDirectoryResultHeader {
  title: String
  isSortable: Boolean
  sortDirection: SortDirection
  sortKey: String
}

type JiraDirectoryResultHeaderConnection {
  totalCount: Int
  pageInfo: PageInfo!
  edges: [JiraDirectoryResultHeaderEdge]
}

type JiraDirectoryResultHeaderEdge {
  node: JiraDirectoryResultHeader
  cursor: String!
}

type JiraDirectoryDefaultResultHeader implements JiraDirectoryResultHeader {
  title: String
  isSortable: Boolean
  sortDirection: SortDirection
  sortKey: String
}

interface JiraDirectoryResultCell {
  renderer(supported: [String]): JiraDirectoryResultCellDataUnion
}

type JiraProjectDirectoryResultCell implements JiraDirectoryResultCell {
  type: String
  renderer(supported: [String]): JiraDirectoryResultCellDataUnion
}

interface JiraDirectoryResult {
  headers: JiraDirectoryResultHeaderConnection
  rows: JiraDirectoryResultValuesConnection
  js(module: String!, id: String): JSDependency!
}

interface JiraDirectoryResultValues {
  columns: JiraDirectoryResultCellConnection
}

type JiraProjectDirectoryResult implements JiraDirectoryResult {
  headers: JiraDirectoryResultHeaderConnection
  rows: JiraDirectoryResultValuesConnection
  js(module: String!, id: String): JSDependency!
}

type JiraDirectoryResultValuesConnection {
  totalCount: Int
  pageInfo: PageInfo!
  edges: [JiraDirectoryResultValuesEdge]
}

type JiraDirectoryResultValuesEdge {
  node: JiraDirectoryResultValues
  cursor: String!
}

type JiraProjectDirectoryResultValues implements JiraDirectoryResultValues {
  columns: JiraDirectoryResultCellConnection
}

type JiraDirectoryResultCellConnection {
  totalCount: Int
  pageInfo: PageInfo!
  edges: [JiraDirectoryResultCellEdge]
}

type JiraDirectoryResultCellEdge {
  node: JiraDirectoryResultCell
  cursor: String!
}

type ProjectLead {
  self: String
  accountId: String
  accountType: String
  displayName: String
  active: Boolean
}

enum JiraProjectType {
  SOFTWARE
  SERVICE_DESK
  BUSINESS
  PRODUCT_DISCOVERY
  UNKNOWN
}

type JiraProjectTypeDetails {
  id: ID!
  type: JiraProjectType!
  key: String!
  displayName: String!
  description: String!
  teamManagedDisplayName: String!
  companyManagedDisplayName: String!
  icon: String!
  color: String!
}

type JiraProjectTypeDetailsConnection {
  totalCount: Int
  pageInfo: PageInfo!
  edges: [JiraProjectTypeDetailsEdge]
}

type JiraProjectTypeDetailsEdge {
  node: JiraProjectTypeDetails
  cursor: String!
}

type JiraProject {
  self: String
  id: ID!
  key: String
  lead: ProjectLead
  name: String
  projectTypeKey: String
  projectType: JiraProjectTypeDetails
  simplified: Boolean
  style: String
  favourite: Boolean
  isPrivate: Boolean
  entityId: String
  uuid: String
  url: String
  lastIssueUpdateDate: String
  category: JiraProjectCategory
}

type JiraProjectFavouriteCell {
  project: JiraProject
  js(module: String!, id: String): JSDependency!
}

type JiraProjectNameCell {
  project: JiraProject
  js(module: String!, id: String): JSDependency!
}
type JiraProjectKeyCell {
  project: JiraProject
  js(module: String!, id: String): JSDependency!
}
type JiraProjectTypeCell {
  project: JiraProject

  js(module: String!, id: String): JSDependency!
}
type JiraProjectLeadCell {
  project: JiraProject

  js(module: String!, id: String): JSDependency!
}
type JiraProjectLastIssueUpdateCell {
  project: JiraProject

  js(module: String!, id: String): JSDependency!
}
type JiraProjectCategoryCell {
  project: JiraProject

  js(module: String!, id: String): JSDependency!
}
type JiraProjectLinkCell {
  project: JiraProject

  js(module: String!, id: String): JSDependency!
}

type JiraProjectActionsCell {
  project: JiraProject

  js(module: String!, id: String): JSDependency!
}
union JiraDirectoryResultCellDataUnion =
    JiraProjectFavouriteCell
  | JiraProjectKeyCell
  | JiraProjectNameCell
  | JiraProjectTypeCell
  | JiraProjectLeadCell
  | JiraProjectLastIssueUpdateCell
  | JiraProjectCategoryCell
  | JiraProjectLinkCell
  | JiraProjectActionsCell
