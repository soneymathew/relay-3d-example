type Query {
  jira: JiraQuery
}

interface Node {
  id: ID!
}

interface HasJsField {
  js(module: String!, id: String): JSDependency!
}

type PageInfo {
  hasNextPage: Boolean
  hasPreviousPage: Boolean
  startCursor: String
  endCursor: String
}

scalar JSDependency

enum SortDirection {
  ASC
  DESC
}

interface HasTotalCount {
  totalCount: Int
}

enum JiraDirectoryFilterCriteriaType {
  KEYWORD
  MULTISELECT
  SELECT
  JQL_BUILDER_ADVANCED
}

input JiraDirectoryFilterCriteriaInput {
  type: JiraDirectoryFilterCriteriaType!
  id: String!
  value: String
  values: [String!]
}

input JiraDirectoryFilterInput {
  criteria: [JiraDirectoryFilterCriteriaInput!]
  page: Int
  sortField: String
  sortDirection: SortDirection
}

type JiraQuery {
  directory(
    cloudId: ID!
    id: ID!
    supported: [String]
    filter: JiraDirectoryFilterInput
  ): JiraDirectory!
  projectCategories(
    cloudId: ID!
    searchText: String
    first: Int
    last: Int
    before: String
    after: String
  ): JiraProjectCategoryConnection
  projectTypes(
    cloudId: ID!
    searchText: String
    first: Int
    last: Int
    before: String
    after: String
  ): JiraProjectTypeDetailsConnection
}

interface JiraDirectory {
  title: String!
  description: String
  pageActions(
    first: Int
    last: Int
    before: String
    after: String
  ): JiraActionRendererConnection
  filterCriteria(
    first: Int
    last: Int
    before: String
    after: String
  ): JiraDirectoryFilterCriteriaRendererConnection
  result: JiraDirectoryResult
  js(module: String!, id: String): JSDependency!
}

type JiraDirectoryFilterCriteriaRendererConnection {
  totalCount: Int
  pageInfo: PageInfo!
  edges: [JiraDirectoryFilterCriteriaRendererEdge]
}

type JiraDirectoryFilterCriteriaRendererEdge {
  node: JiraDirectoryFilterCriteriaRenderer
  cursor: String!
}

type JiraDirectoryFilterCriteriaRenderer {
  renderer(supported: [String]): JiraDirectoryFilterCriteria
}

interface JiraDirectoryCreateItem {
  canCreate: Boolean!
  js(module: String!, id: String): JSDependency!
}

type JiraGenericDirectory implements JiraDirectory & HasJsField {
  title: String!
  description: String
  pageActions(
    first: Int
    last: Int
    before: String
    after: String
  ): JiraActionRendererConnection
  filterCriteria(
    first: Int
    last: Int
    before: String
    after: String
  ): JiraDirectoryFilterCriteriaRendererConnection
  result: JiraDirectoryResult
  js(module: String!, id: String): JSDependency!
}

type JiraIssueDirectory implements JiraDirectory & HasJsField {
  title: String!
  description: String
  pageActions(
    first: Int
    last: Int
    before: String
    after: String
  ): JiraActionRendererConnection
  filterCriteria(
    first: Int
    last: Int
    before: String
    after: String
  ): JiraDirectoryFilterCriteriaRendererConnection
  result: JiraDirectoryResult
  js(module: String!, id: String): JSDependency!
}

type JiraGenericDirectoryCreateItem implements JiraDirectoryCreateItem & HasJsField {
  canCreate: Boolean!
  js(module: String!, id: String): JSDependency!
}

type JiraProjectCategory {
  id: ID!
  categoryId: String!
  name: String!
  description: String
}

type JiraProjectCategoryConnection implements HasTotalCount {
  totalCount: Int
  pageInfo: PageInfo!
  edges: [JiraProjectCategoryEdge]
}

type JiraProjectCategoryEdge {
  node: JiraProjectCategory
  cursor: String!
}

interface JiraDirectoryFilterCriteria {
  type: String
}

type JiraDirectorySearchTextFilterCriteria implements JiraDirectoryFilterCriteria & HasJsField {
  type: String
  # return the searchText specified by the user
  searchText: String
  js(module: String!, id: String): JSDependency!
}

type JiraDirectoryJqlBuilderAdvancedCriteria implements JiraDirectoryFilterCriteria & HasJsField {
  type: String
  # return the jql specified by the user
  jql: String
  js(module: String!, id: String): JSDependency!
}

type JiraGenericDirectoryProjectTypesFilterCriteria implements JiraDirectoryFilterCriteria & HasJsField {
  type: String
  selectedItems: [JiraProjectTypeDetails]
  js(module: String!, id: String): JSDependency!
}

type JiraGenericDirectoryProjectCategoriesFilterCriteria implements JiraDirectoryFilterCriteria & HasJsField {
  type: String
  selectedItems: [JiraProjectCategory]
  js(module: String!, id: String): JSDependency!
}

interface JiraDirectoryResultHeaderValue {
  title: String
  isSortable: Boolean
  sortDirection: SortDirection
  sortKey: String
  js(module: String!, id: String): JSDependency!
}

interface JiraDirectoryResultHeader {
  renderer(supported: [String]): JiraDirectoryResultHeaderValue
}

type JiraDirectoryGenericResultHeader implements JiraDirectoryResultHeader {
  renderer(supported: [String]): JiraDirectoryResultHeaderValue
}

type JiraDirectoryResultHeaderConnection implements HasTotalCount {
  totalCount: Int
  pageInfo: PageInfo!
  edges: [JiraDirectoryResultHeaderEdge]
}

type JiraDirectoryResultHeaderEdge {
  node: JiraDirectoryResultHeader
  cursor: String!
}

type JiraDirectoryDefaultResultHeader implements JiraDirectoryResultHeaderValue & HasJsField {
  title: String
  isSortable: Boolean
  sortDirection: SortDirection
  sortKey: String
  js(module: String!, id: String): JSDependency!
}

type JiraDirectoryIssueResultHeader implements JiraDirectoryResultHeaderValue & HasJsField {
  title: String
  isSortable: Boolean
  sortDirection: SortDirection
  sortKey: String
  js(module: String!, id: String): JSDependency!
}

interface JiraDirectoryResultCell {
  renderer(supported: [String]): JiraDirectoryResultRenderer
}

type JiraGenericDirectoryResultCell implements JiraDirectoryResultCell {
  type: String
  renderer(supported: [String]): JiraDirectoryResultRenderer
}

interface JiraDirectoryResult {
  headers: JiraDirectoryResultHeaderConnection
  rows: JiraDirectoryResultValuesConnection
  js(module: String!, id: String): JSDependency!
}

interface JiraDirectoryResultValues {
  columns: JiraDirectoryResultCellConnection
}

type JiraGenericDirectoryResult implements JiraDirectoryResult & HasJsField {
  headers: JiraDirectoryResultHeaderConnection
  rows: JiraDirectoryResultValuesConnection
  js(module: String!, id: String): JSDependency!
}

type JiraDirectoryResultValuesConnection implements HasTotalCount {
  totalCount: Int
  pageInfo: PageInfo!
  edges: [JiraDirectoryResultValuesEdge]
}

type JiraDirectoryResultValuesEdge {
  node: JiraDirectoryResultValues
  cursor: String!
}

type JiraGenericDirectoryResultValues implements JiraDirectoryResultValues {
  columns: JiraDirectoryResultCellConnection
}

type JiraDirectoryResultCellConnection implements HasTotalCount {
  totalCount: Int
  pageInfo: PageInfo!
  edges: [JiraDirectoryResultCellEdge]
}

type JiraDirectoryResultCellEdge {
  node: JiraDirectoryResultCell
  cursor: String!
}

enum JiraProjectType {
  SOFTWARE
  SERVICE_DESK
  BUSINESS
  PRODUCT_DISCOVERY
  UNKNOWN
}

type JiraProjectTypeDetails {
  id: ID!
  type: JiraProjectType!
  key: String!
  displayName: String!
  description: String!
  teamManagedDisplayName: String!
  companyManagedDisplayName: String!
  icon: String!
  color: String!
}

type JiraProjectTypeDetailsConnection implements HasTotalCount {
  totalCount: Int
  pageInfo: PageInfo!
  edges: [JiraProjectTypeDetailsEdge]
}

type JiraProjectTypeDetailsEdge {
  node: JiraProjectTypeDetails
  cursor: String!
}

type JiraGenericFavoriteInfo implements Node {
  id: ID!
  isFavorite: Boolean
}

type JiraGenericFavouriteField implements JiraDirectoryResultRenderer & HasJsField {
  favoriteInfo: JiraGenericFavoriteInfo
  js(module: String!, id: String): JSDependency!
}

interface JiraAction {
  id: ID!
  name: String
  canPerform: Boolean
}

type JiraGenericAction implements JiraAction & Node {
  id: ID!
  name: String
  canPerform: Boolean
  js(module: String!, id: String): JSDependency!
}

type JiraCreateEntityAction implements JiraAction & Node {
  id: ID!
  name: String
  canPerform: Boolean
  entityType: String
  js(module: String!, id: String): JSDependency!
}

type JiraActionRendererConnection implements HasTotalCount {
  totalCount: Int
  pageInfo: PageInfo!
  edges: [JiraActionRendererEdge]
}

type JiraActionRendererEdge {
  node: JiraActionRenderer
  cursor: String!
}

type JiraActionRenderer {
  renderer(supported: [String]): JiraAction
}

type JiraGenericActionsField implements JiraDirectoryResultRenderer & HasJsField {
  actions(
    first: Int
    last: Int
    before: String
    after: String
  ): JiraActionRendererConnection
  js(module: String!, id: String): JSDependency!
}

interface JiraDirectoryResultRenderer {
  js(module: String!, id: String): JSDependency!
}

scalar URL

enum JiraLabelDecoration {
  NORMAL
  STRIKE_THRU
}

enum JiraTextTransform {
  UPPER
}

enum JiraIconStyle {
  CIRCLE
  SQUARE
}

type JiraIconImage {
  xsmall: String
  small: String
  medium: String
  large: String
}

type JiraIcon {
  image: JiraIconImage
  altText: String
  style: JiraIconStyle
}

type JiraLabel {
  stringValue: String
  decoration: JiraLabelDecoration
  textTransform: JiraTextTransform # status is uppercase
  altText: String
  linkUrl: URL
}

type JiraGenericField implements JiraDirectoryResultRenderer & HasJsField {
  js(module: String!, id: String): JSDependency!
  altText: String
  label: JiraLabel
  icon: JiraIcon
  color: String
}

type JiraGenericFieldCollection implements JiraDirectoryResultRenderer & HasJsField {
  js(module: String!, id: String): JSDependency!
  delimiter: String
  fields(
    cloudId: ID!
    searchText: String
    first: Int
    last: Int
    before: String
    after: String
  ): JiraGenericFieldConnection
}

type JiraGenericFieldConnection implements HasTotalCount {
  edges: [JiraGenericFieldEdge]
  pageInfo: PageInfo!
  totalCount: Int
}

type JiraGenericFieldEdge {
  node: JiraGenericField
  cursor: String!
}
