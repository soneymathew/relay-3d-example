type Query {
  jira: JiraQuery
}

type PageInfo {
  hasNextPage: Boolean
  hasPreviousPage: Boolean
  startCursor: String
  endCursor: String
}

scalar JSDependency

enum SortDirection {
  ASC
  DESC
}

interface HasTotalCount {
  totalCount: Int
}

enum JiraDirectoryFilterCriteriaType {
  KEYWORD
  MULTISELECT
  SELECT
}

input JiraDirectoryFilterCriteriaInput {
  type: JiraDirectoryFilterCriteriaType!
  id: String!
  value: String
  values: [String!]
}

input JiraDirectoryFilterInput {
  criteria: [JiraDirectoryFilterCriteriaInput!]
  page: Int
  sortField: String
  sortDirection: SortDirection
}

type JiraQuery {
  directory(
    cloudId: ID!
    id: ID!
    supported: [String]
    filter: JiraDirectoryFilterInput
  ): JiraDirectory!
  projectCategories(
    cloudId: ID!
    searchText: String
    first: Int
    last: Int
    before: String
    after: String
  ): JiraProjectCategoryConnection
  projectTypes(
    cloudId: ID!
    searchText: String
    first: Int
    last: Int
    before: String
    after: String
  ): JiraProjectTypeDetailsConnection
}

interface JiraDirectory {
  title: String!
  description: String
  createDirectoryItem(supported: [String]): JiraDirectoryCreateItem
  filterCriteria(supported: [String]): [JiraDirectoryFilterCriteria!]!
  result: JiraDirectoryResult
  js(module: String!, id: String): JSDependency!
}

interface JiraDirectoryCreateItem {
  canCreate: Boolean!
  js(module: String!, id: String): JSDependency!
}

type JiraGenericDirectory implements JiraDirectory {
  title: String!
  description: String
  createDirectoryItem(supported: [String]): JiraDirectoryCreateItem
  filterCriteria(supported: [String]): [JiraDirectoryFilterCriteria!]!
  result: JiraDirectoryResult
  js(module: String!, id: String): JSDependency!
}

type JiraGenericDirectoryCreateItem implements JiraDirectoryCreateItem {
  canCreate: Boolean!
  js(module: String!, id: String): JSDependency!
}

type JiraProjectCategory {
  id: ID!
  categoryId: String!
  name: String!
  description: String
}

type JiraProjectCategoryConnection implements HasTotalCount {
  totalCount: Int
  pageInfo: PageInfo!
  edges: [JiraProjectCategoryEdge]
}

type JiraProjectCategoryEdge {
  node: JiraProjectCategory
  cursor: String!
}

interface JiraDirectoryFilterCriteria {
  type: String
}

type JiraDirectorySearchTextFilterCriteria implements JiraDirectoryFilterCriteria {
  type: String
  # return the searchText specified by the user
  searchText: String
  js(module: String!, id: String): JSDependency!
}

type JiraGenericDirectoryProjectTypesFilterCriteria implements JiraDirectoryFilterCriteria {
  type: String
  selectedItems: [JiraProjectTypeDetails]
  js(module: String!, id: String): JSDependency!
}

type JiraGenericDirectoryProjectCategoriesFilterCriteria implements JiraDirectoryFilterCriteria {
  type: String
  selectedItems: [JiraProjectCategory]
  js(module: String!, id: String): JSDependency!
}

interface JiraDirectoryResultHeader {
  title: String
  isSortable: Boolean
  sortDirection: SortDirection
  sortKey: String
}

type JiraDirectoryResultHeaderConnection implements HasTotalCount {
  totalCount: Int
  pageInfo: PageInfo!
  edges: [JiraDirectoryResultHeaderEdge]
}

type JiraDirectoryResultHeaderEdge {
  node: JiraDirectoryResultHeader
  cursor: String!
}

type JiraDirectoryDefaultResultHeader implements JiraDirectoryResultHeader {
  title: String
  isSortable: Boolean
  sortDirection: SortDirection
  sortKey: String
}

interface JiraDirectoryResultCell {
  renderer(supported: [String]): JiraDirectoryResultCellDataUnion
}

type JiraGenericDirectoryResultCell implements JiraDirectoryResultCell {
  type: String
  renderer(supported: [String]): JiraDirectoryResultCellDataUnion
}

interface JiraDirectoryResult {
  headers: JiraDirectoryResultHeaderConnection
  rows: JiraDirectoryResultValuesConnection
  js(module: String!, id: String): JSDependency!
}

interface JiraDirectoryResultValues {
  columns: JiraDirectoryResultCellConnection
}

type JiraGenericDirectoryResult implements JiraDirectoryResult {
  headers: JiraDirectoryResultHeaderConnection
  rows: JiraDirectoryResultValuesConnection
  js(module: String!, id: String): JSDependency!
}

type JiraDirectoryResultValuesConnection implements HasTotalCount {
  totalCount: Int
  pageInfo: PageInfo!
  edges: [JiraDirectoryResultValuesEdge]
}

type JiraDirectoryResultValuesEdge {
  node: JiraDirectoryResultValues
  cursor: String!
}

type JiraGenericDirectoryResultValues implements JiraDirectoryResultValues {
  columns: JiraDirectoryResultCellConnection
}

type JiraDirectoryResultCellConnection implements HasTotalCount {
  totalCount: Int
  pageInfo: PageInfo!
  edges: [JiraDirectoryResultCellEdge]
}

type JiraDirectoryResultCellEdge {
  node: JiraDirectoryResultCell
  cursor: String!
}

type ProjectLead {
  self: String
  accountId: String
  accountType: String
  displayName: String
  active: Boolean
}

enum JiraProjectType {
  SOFTWARE
  SERVICE_DESK
  BUSINESS
  PRODUCT_DISCOVERY
  UNKNOWN
}

type JiraProjectTypeDetails {
  id: ID!
  type: JiraProjectType!
  key: String!
  displayName: String!
  description: String!
  teamManagedDisplayName: String!
  companyManagedDisplayName: String!
  icon: String!
  color: String!
}

type JiraProjectTypeDetailsConnection implements HasTotalCount {
  totalCount: Int
  pageInfo: PageInfo!
  edges: [JiraProjectTypeDetailsEdge]
}

type JiraProjectTypeDetailsEdge {
  node: JiraProjectTypeDetails
  cursor: String!
}

type JiraProject {
  id: ID!
  key: String
  lead: ProjectLead
  name: String
  projectTypeKey: String
  projectType: JiraProjectTypeDetails
  simplified: Boolean
  style: String
  favourite: Boolean
  isPrivate: Boolean
  entityId: String
  uuid: String
  url: String
  lastIssueUpdateDate: String
  category: JiraProjectCategory
}

type JiraProjectFavouriteCell {
  project: JiraProject
  js(module: String!, id: String): JSDependency!
}

type JiraProjectActionsCell {
  project: JiraProject
  js(module: String!, id: String): JSDependency!
}

union JiraDirectoryResultCellDataUnion =
    JiraProjectFavouriteCell
  | JiraProjectActionsCell
  | JiraGenericField
  | JiraGenericFieldArray

scalar URL

enum JiraLabelDecoration {
  NORMAL
  STRIKE_THRU
}

enum JiraTextTransform {
  UPPER
}

type JiraIconImage {
  xsmall: String
  small: String
  medium: String
  large: String
}

type JiraIcon {
  image: JiraIconImage
  altText: String
}

type JiraLabel {
  stringValue: String
  decoration: JiraLabelDecoration
  textTransform: JiraTextTransform # status is uppercase
  altText: String
  linkUrl: URL
}

type JiraGenericField {
  js(module: String!, id: String): JSDependency!
  altText: String
  label: JiraLabel
  icon: JiraIcon
  color: String
}

type JiraGenericFieldArray {
  values: [JiraGenericField]
  delimiter: String
}

type JiraIssueDirectory implements JiraDirectory {
  title: String!
  description: String
  createDirectoryItem(supported: [String]): JiraDirectoryCreateItem
  filterCriteria(supported: [String]): [JiraDirectoryFilterCriteria!]!
  result: JiraDirectoryResult
  js(module: String!, id: String): JSDependency!
}
