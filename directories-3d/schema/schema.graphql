type Query {
  jira: JiraQuery
}

scalar JSDependency

type JiraQuery {
  directory(cloudId: ID!, id: ID!, supported: [String]): JiraDirectory!
}

interface JiraDirectory {
  title: String!
  createDirectoryItem(supported: [String]): JiraDirectoryCreateItem!
  filterCriteria(supported: [String]): [JiraDirectoryFilterCriteria!]!
  # What criteria to render (search text, project types, categories)
  # What is already specified by the uses searchText=Perf projectTypes=software,jsm categories=abcm,def
  # which component should be used to render each item
  result: JiraDirectoryResult
  js(module: String!, id: String): JSDependency!
}

type JiraProjectDirectory implements JiraDirectory {
  title: String!
  createDirectoryItem(supported: [String]): JiraDirectoryCreateItem!
  filterCriteria(supported: [String]): [JiraDirectoryFilterCriteria!]!
  result: JiraDirectoryResult
  js(module: String!, id: String): JSDependency!
}

interface JiraDirectoryCreateItem {
  canCreate: Boolean!
  js(module: String!, id: String): JSDependency!
}

type JiraProjectDirectoryCreateItem implements JiraDirectoryCreateItem {
  canCreate: Boolean!
  js(module: String!, id: String): JSDependency!
}

type JiraProjectType {
  key: String
  icon: String
  formattedKey: String
  id: String
}

type JiraProjectCategory {
  name: String
  description: String
  id: String
}

interface JiraDirectoryFilterCriteria {
  type: String
}

type JiraDirectorySearchTextFilterCriteria implements JiraDirectoryFilterCriteria {
  type: String
  # return the searchText specified by the user
  searchText: String
  js(module: String!, id: String): JSDependency!
}

type JiraProjectDirectoryProjectTypesFilterCriteria implements JiraDirectoryFilterCriteria {
  type: String
  selectedItems: [JiraProjectType]
  js(module: String!, id: String): JSDependency!
}

type JiraProjectDirectoryProjectCategoriesFilterCriteria implements JiraDirectoryFilterCriteria {
  type: String
  selectedItems: [JiraProjectCategory]
  js(module: String!, id: String): JSDependency!
}

enum SortDirection {
  ASC
  DESC
}

interface JiraDirectoryResultHeader {
  title: String
  isSortable: Boolean
  sortDirection: SortDirection
}

type JiraProjectDirectoryResultHeader implements JiraDirectoryResultHeader {
  title: String
  isSortable: Boolean
  sortDirection: SortDirection
}

interface JiraDirectoryResultCell {
  renderer(supported: [String]): JiraDirectoryResultCellDataUnion
}

type JiraProjectDirectoryResultCell implements JiraDirectoryResultCell {
  type: String
  renderer(supported: [String]): JiraDirectoryResultCellDataUnion
}

interface JiraDirectoryResult {
  headers: [JiraDirectoryResultHeader]
  rows: [JiraDirectoryResultValues]
  js(module: String!, id: String): JSDependency!
}

interface JiraDirectoryResultValues {
  columns: [JiraDirectoryResultCell]
}

type JiraProjectDirectoryResult implements JiraDirectoryResult {
  headers: [JiraDirectoryResultHeader]
  rows: [JiraDirectoryResultValues]
  js(module: String!, id: String): JSDependency!
}

type JiraProjectDirectoryResultValues implements JiraDirectoryResultValues {
  columns: [JiraDirectoryResultCell]
}

type ProjectLead {
  self: String
  accountId: String
  accountType: String
  displayName: String
  active: Boolean
}

# TODO: match this to current design later
type JiraProject {
  self: String
  id: String
  key: String
  lead: ProjectLead
  name: String
  projectTypeKey: String
  simplified: Boolean
  style: String
  favourite: Boolean
  isPrivate: Boolean
  entityId: String
  uuid: String
  todo: String
  lastIssueUpdateDate: String
}

type JiraProjectFavouriteCell {
  project: JiraProject
  js(module: String!, id: String): JSDependency!
}

type JiraProjectNameCell {
  project: JiraProject
  js(module: String!, id: String): JSDependency!
}
type JiraProjectKeyCell {
  project: JiraProject
  js(module: String!, id: String): JSDependency!
}
type JiraProjectTypeCell {
  project: JiraProject

  js(module: String!, id: String): JSDependency!
}
type JiraProjectLeadCell {
  project: JiraProject

  js(module: String!, id: String): JSDependency!
}
type JiraProjectLastIssueUpdateCell {
  project: JiraProject

  js(module: String!, id: String): JSDependency!
}
type JiraProjectCategoryCell {
  project: JiraProject

  js(module: String!, id: String): JSDependency!
}
type JiraProjectLinkCell {
  project: JiraProject

  js(module: String!, id: String): JSDependency!
}

type JiraProjectActionsCell {
  project: JiraProject

  js(module: String!, id: String): JSDependency!
}
union JiraDirectoryResultCellDataUnion =
    JiraProjectFavouriteCell
  | JiraProjectKeyCell
  | JiraProjectNameCell
  | JiraProjectTypeCell
  | JiraProjectLeadCell
  | JiraProjectLastIssueUpdateCell
  | JiraProjectCategoryCell
  | JiraProjectLinkCell
  | JiraProjectActionsCell
